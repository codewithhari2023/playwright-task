17/7/25
what is playwirght ?
-plaiywirght is an open source automation library created and maintained by microsoft for performing end to end testing. it allows us to automate browser (like chromium firefox,webkit)

-it performs action like

-navigation of web pages

-clicking  button events

-filling the forms

-taking screenshot

-perform complex testing for user.

-it support single and  multipage application automation 

*key feature  of playwirght
-it multiple borwsers 
-it supports headless and headed mode
-auto waiting
-parallel execution 
-network mocking
-visual testing 
-Ci/cD ready

*comman uses
-Login/logout automation
-form validation
-UI flow validation
-Responsive test
-APi mock during forentend testing

software pre-requsit
-nodejs
     node -v
-npm
    npm -v
-typescript
    tsc -v
*Editor(vs code)

commands

 npx playwright test
    Runs the end-to-end tests.

  npx playwright test --ui
    Starts the interactive UI mode.

  npx playwright test --project=chromium
    Runs the tests only on Desktop Chrome.

  npx playwright test example
    Runs the tests in a specific file.

  npx playwright test --debug
    Runs the tests in debug mode.

  npx playwright codegen
    Auto generate tests with Codegen.

We suggest that you begin by typing:

    npx playwright test


To open last HTML report run:

  npx playwright show-report   

*folder structure 
node_modules: all dependency and dev dependency will install in it
package.json:all install dependency entry will found here
package-lock.json:detail description of all dependency will found here

test folder:it is use to write automation script
test-exmaple: sample question script found here,provide playwright 

note  by default all playwright automation script run in headless mode.

how to execute automation with headed mode
 npx playwright test --headed

 =============================================================
 18/7/25

 Locators: it is to find an element on page at any moment

 1. Id selector: select an element base on id 
  const elementName=page.locator("id=#idname")

2. class selector: select an element based on class name
 const elementname=page.locator(".classanme")

 3. text selector:select an element bases on what text it contain
 const elementName=page.locator("[text=textformat]")

 4 css selector : select an element bases on their css property
 const element\=page.locator("css=buttonid")

 5 Xpath selector: select an elemen bases on their xpath query:
 const elementName=page.locator("xpath=//button[text()=submit]");
 

 browserContext:
 browserContext is an instance of browsers or you can say seperate with incognito mode. where it store user session and cookies seperately it is used for authentication 
 if there is multiple user then an only then we use we do not use it for single user

 *Handling Authentication API(Basic Authentication)
 -here write automation test script for authorizing user
======================================================================================================
21/7/25

Assertion
-In playwright assertion is use to verify that the application behaves as expected or not during testing they ensure that UI element data are in correct state before or after  performing action
-plaiywirght provide us built-in assertion through expect( )method,expectmethod provided by plaiywirght/test package

example:
toBevisible():it will pass the test if element is visible
toHaveText():it will pass the test if element has text or data in it
toBeEnable():it will pass the test if element is enabled

await page.pause(): it will pause execution

Custom assertion
we need to write custom assertion for complex condition and special bussiness logic
-we can make reusable logic
-we can use it for dynamic data condition

example: write a logic for custom assertion to ceheck number is than greater than 10 or not
======================================================================================================
22/7/25

How to configure text according to your choice 

*Hooks 
ex:
run setup before logic test
cleanup code after logic test

Example of Hooks
beforeAll():run code once before all test in file
afterAll():run code once after all test in file
beforeEach():run code everytime before all test in run file
afterEach():run code everytime after all test in run file


how to use Record Features 
-it provide test script after perfoming  action on webapplication or webahes
-to start record feature we have page.pause() method in test code


*use of annotation
*use of hooks



fixtures:
it is resusable piece of  setup  and teardown logical code  that you can share across  test
it works like helper function
playwright provide us built-in fixtures as well as we can create custom fixture


API mocking in playwright 
mocking simulates API responses without hitting the real backend

why mock?
backend is not ready
make it more faster
simulate errors(404,500,403,200)
to control test data



